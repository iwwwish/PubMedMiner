/*
 * Copyright (C) 2014 Vishal Siramshetty <srmshtty[at]gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.unibonn.vishal.gui;

import de.unibonn.vishal.tools.AbstractTagger;
import de.unibonn.vishal.pubmed.PubMedAbstract;
import de.unibonn.vishal.pubmed.PubMedUtils;
import de.unibonn.vishal.tools.JSONWriter;
import de.unibonn.vishal.tools.SimpleWebBrowser;
import de.unibonn.vishal.utils.Utility;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.Rectangle;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author Vishal Siramshetty <srmshtty[at]gmail.com>
 */
public class MainUI extends javax.swing.JFrame {

    private List<PubMedAbstract> abstracts = new ArrayList<>();
    private JEditorPane htmlPane;
    private JTree tree;
    private String query;
    private UITagger tagger = null;
    private AbstractLoader loader = null;
    private String jsonMatrix;
    private String jsonTree;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outerPanel = new javax.swing.JPanel();
        queryPanel = new javax.swing.JPanel();
        queryWord = new javax.swing.JTextField();
        singleQuery = new javax.swing.JRadioButton();
        multipleQuery = new javax.swing.JRadioButton();
        queryTypeLabel = new javax.swing.JLabel();
        queryLabel = new javax.swing.JLabel();
        maxNumResults = new javax.swing.JTextField();
        resultCountLabel = new javax.swing.JLabel();
        processQuery = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        resultPanel = new javax.swing.JPanel();
        statusBar = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancelTask = new javax.swing.JButton();
        mainMenu = new javax.swing.JMenuBar();
        analyzeMenu = new javax.swing.JMenu();
        coAnalysis = new javax.swing.JMenuItem();
        nerAnalysis = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenu();
        saveAllAbstracts = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewCoNetwork = new javax.swing.JMenuItem();
        viewCoMatrix = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PubMedMiner");
        setName("MainFrame"); // NOI18N

        outerPanel.setBorder(null);

        queryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Query", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        queryWord.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        queryWord.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queryWordKeyReleased(evt);
            }
        });

        singleQuery.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        singleQuery.setText("Simple");
        singleQuery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        singleQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleQueryActionPerformed(evt);
            }
        });

        multipleQuery.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        multipleQuery.setText("Complex");
        multipleQuery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        multipleQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleQueryActionPerformed(evt);
            }
        });

        queryTypeLabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        queryTypeLabel.setText("Query Type:");

        queryLabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        queryLabel.setText("Query:");

        resultCountLabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        resultCountLabel.setText("Result Limit:");

        processQuery.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        processQuery.setText("Go");
        processQuery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        processQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processQueryActionPerformed(evt);
            }
        });

        infoLabel.setFont(new java.awt.Font("SansSerif", 2, 11)); // NOI18N
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Provide your query here. If complex, separate each query word by AND (or) OR. (example: aspirin AND hepatotoxicity)");

        jLabel1.setFont(new java.awt.Font("SansSerif", 2, 11)); // NOI18N
        jLabel1.setText("(maximum is 299)");

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queryTypeLabel)
                    .addComponent(queryLabel))
                .addGap(18, 18, 18)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addComponent(singleQuery)
                        .addGap(18, 18, 18)
                        .addComponent(multipleQuery)
                        .addGap(39, 39, 39)
                        .addComponent(resultCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxNumResults, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queryPanelLayout.createSequentialGroup()
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(infoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(queryWord))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processQuery)))
                .addGap(16, 16, 16))
        );
        queryPanelLayout.setVerticalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleQuery)
                    .addComponent(multipleQuery)
                    .addComponent(queryTypeLabel)
                    .addComponent(resultCountLabel)
                    .addComponent(maxNumResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processQuery)
                    .addComponent(queryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Results", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );

        statusBar.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        statusBar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        statusBar.setToolTipText("");
        statusBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        progressBar.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        progressBar.setIndeterminate(true);
        progressBar.setString("working...");
        progressBar.setStringPainted(true);

        cancelTask.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        cancelTask.setText("Cancel");
        cancelTask.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outerPanelLayout = new javax.swing.GroupLayout(outerPanel);
        outerPanel.setLayout(outerPanelLayout);
        outerPanelLayout.setHorizontalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(outerPanelLayout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelTask, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        outerPanelLayout.setVerticalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addComponent(queryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelTask, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(1, 1, 1))
        );

        progressBar.setVisible(false);
        cancelTask.setVisible(false);

        mainMenu.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        analyzeMenu.setText("Analyze ");

        coAnalysis.setText("Co-occurrence");
        coAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coAnalysisActionPerformed(evt);
            }
        });
        analyzeMenu.add(coAnalysis);

        nerAnalysis.setText("Named Entity Recognition");
        nerAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nerAnalysisActionPerformed(evt);
            }
        });
        analyzeMenu.add(nerAnalysis);

        mainMenu.add(analyzeMenu);

        saveMenu.setText("Save ");

        saveAllAbstracts.setText("All abstracts");
        saveMenu.add(saveAllAbstracts);

        mainMenu.add(saveMenu);

        viewMenu.setText("View ");

        viewCoNetwork.setText("Co-occurrence network");
        viewCoNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCoNetworkActionPerformed(evt);
            }
        });
        viewMenu.add(viewCoNetwork);

        viewCoMatrix.setText("Co-occurrence matrix");
        viewCoMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCoMatrixActionPerformed(evt);
            }
        });
        viewMenu.add(viewCoMatrix);

        mainMenu.add(viewMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nerAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nerAnalysisActionPerformed
        if (tagger != null) {
            if (!tagger.isDone()) {
                statusBar.setText("Work in progress... please wait. press cancel to terminate");

            } else {
                tagger = new UITagger(abstracts);
                showAnalysisProgress();
                tagger.setOperation(AbstractTagger.OPERATION.NER);
                tagger.execute();

            }
        } else {
            tagger = new UITagger(abstracts);
            showAnalysisProgress();
            tagger.setOperation(AbstractTagger.OPERATION.NER);
            tagger.execute();

        }


    }//GEN-LAST:event_nerAnalysisActionPerformed

    private void coAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coAnalysisActionPerformed
        if (tagger != null) {
            if (!tagger.isDone()) {
                statusBar.setText("Work in progress... please wait. press cancel to terminate");

            } else {
                tagger = new UITagger(abstracts);
                showAnalysisProgress();
                tagger.setOperation(AbstractTagger.OPERATION.COA);
                tagger.execute();

            }
        } else {
            tagger = new UITagger(abstracts);
            showAnalysisProgress();
            tagger.setOperation(AbstractTagger.OPERATION.COA);
            tagger.execute();
        }

    }//GEN-LAST:event_coAnalysisActionPerformed

    private void cancelTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTaskActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you want to cancel the task?",
                "PubMedMiner",
                JOptionPane.YES_NO_OPTION);
        // if choosen Yes, then the application will be closed
        if (selectedOption == JOptionPane.YES_OPTION) {

            //progressBar.setString("Finished!");
            progressBar.setVisible(false);
            cancelTask.setVisible(false);
            if (tagger != null) {
                tagger.cancel(true);
                statusBar.setText("Task cancelled.");
            }
        }
    }//GEN-LAST:event_cancelTaskActionPerformed

    private void processQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processQueryActionPerformed
        // check if none of the query types is selected
        if (!singleQuery.isSelected() && !multipleQuery.isSelected()) {
            processQuery.setEnabled(true);
            Utility.UI.showInfoMessage(getRootPane(), "Please select a query type.");
        } else {
            processQuery.setEnabled(false);
            // check if there are abstracts already loaded
            if (!abstracts.isEmpty()) {
                abstracts.clear();
            }
            // remove all components from the result display panel
            resultPanel.removeAll();
            // fetch the query word
            query = queryWord.getText().trim();

            int resultLimit;
            // fetch the result limit. if no limit is provided, default limit is set to 299 (the maximum)
            if (!maxNumResults.getText().trim().isEmpty()) {
                resultLimit = Integer.parseInt(maxNumResults.getText().trim());
            } else {
                Utility.UI.showInfoMessage(getRootPane(), "No result limit provided. Limit set to 299.");
                resultLimit = 299;
            }
            // check if query word is empty of contains only space 
            if (query.isEmpty()) {
                Utility.UI.showInfoMessage(getRootPane(), "No query provided.");
                processQuery.setEnabled(true);
                return;
            }
            // if query is not null, then all set to fetch the abstracts from pubmed and load them
            if (query != null) {
                loader = new AbstractLoader(query, resultLimit);
                showLoadingProgress();
                loader.execute();

            }
        }
    }//GEN-LAST:event_processQueryActionPerformed

    private void multipleQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleQueryActionPerformed
        if (multipleQuery.isSelected()) {
            singleQuery.setSelected(false);
        }
    }//GEN-LAST:event_multipleQueryActionPerformed

    private void singleQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleQueryActionPerformed
        if (singleQuery.isSelected()) {
            multipleQuery.setSelected(false);
        }
    }//GEN-LAST:event_singleQueryActionPerformed

    private void queryWordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queryWordKeyReleased
        query = queryWord.getText().trim();
        if (singleQuery.isSelected()) {
            if (query.contains("AND")) {
                statusBar.setText("Error: Single query cannot have query separator AND.");
            } else {
                statusBar.setText(null);
            }
        }

        if (multipleQuery.isSelected()) {
            if (!query.isEmpty() && !query.contains("AND")) {
                // more sensible method will be to extract pubmed abstracts and check if none were retrieved, then display an error
                statusBar.setText("Error: Mutiple queries should be separated by AND");
            } else {
                statusBar.setText(null);
            }
        }
    }//GEN-LAST:event_queryWordKeyReleased

    private void viewCoNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCoNetworkActionPerformed

        if (jsonTree == null) {
            statusBar.setText("Error: No co-occurrence network found!");
        } else {
            // to do: create a jFrame and display network
            statusBar.setText("Displaying network in a new Window!");
            try {
                SimpleWebBrowser.openHtmlPage("visualization/network/index.html");
            } catch (IOException ex) {
                Utility.UI.showInfoMessage(getRootPane(), "Network not found!");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_viewCoNetworkActionPerformed

    private void viewCoMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCoMatrixActionPerformed
        if (jsonMatrix == null) {
            statusBar.setText("Error: No co-occurrence matrix found!");
        } else {
            // to do: create a jFrame and display matrix
            statusBar.setText("Displaying matrix in a new Window!");
            try {
                SimpleWebBrowser.openHtmlPage("visualization/matrix/test.html");
            } catch (IOException ex) {
                Utility.UI.showInfoMessage(getRootPane(), "Matrix not found!");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_viewCoMatrixActionPerformed

    private void updateAbstracts() {

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            String pmid = (String) nodeInfo;
            pmid = pmid.substring(6, pmid.length());
            for (PubMedAbstract abs : abstracts) {
                String pmid1 = String.valueOf(abs.getPMID());
                if (pmid1.equals(pmid)) {
                    String content = abs.getCompleteAbstract();

                    htmlPane.setBackground(Color.white);
                    StyleSheet styleSheet = ((HTMLEditorKit) htmlPane.getEditorKit()).getStyleSheet();
                    styleSheet.addRule("body {color:#000; font-family:times; margin: 5px; }");
                    HTMLEditorKit kit = (HTMLEditorKit) htmlPane.getEditorKit();
                    kit.setStyleSheet(styleSheet);
                    htmlPane.setEditorKit(kit);
                    htmlPane.setText(content);
                    htmlPane.setCaretPosition(0);
                    htmlPane.setBackground(Color.WHITE);
                    htmlPane.setEditable(false);
                }
            }
        } else {
            System.out.println("No leaf node selected!");
        }

    }

    private void showAnalysisProgress() {
        if (!abstracts.isEmpty()) {
            progressBar.setVisible(true);
            cancelTask.setVisible(true);
        }
    }

    private void showLoadingProgress() {
        if (abstracts.isEmpty()) {
            progressBar.setVisible(true);
            cancelTask.setVisible(true);
        }
    }

    class AbstractLoader extends SwingWorker<Void, Void> {

        private String query_Word;
        private int resultLimit;

        public AbstractLoader(String querWord, int resultLimit) {
            this.query_Word = querWord;
            this.resultLimit = resultLimit;
        }

        @Override
        protected void done() {

            if (resultLimit > abstracts.size()) {
                statusBar.setText("PubMed contains only " + abstracts.size() + " Abstract(s)." + " Loaded " + abstracts.size() + " Abstract(s).");
            } else {
                statusBar.setText("Successful! Loaded " + abstracts.size() + " Abstract(s).");
            }
            progressBar.setVisible(false);
            cancelTask.setVisible(false);
            processQuery.setEnabled(true);
        }

        @Override
        protected Void doInBackground() throws Exception {
            statusBar.setText("working...");
            if (query_Word != null) {

                progressBar.setString("Fetching Abstracts from PubMed");
                try {
                    abstracts = PubMedUtils.getPubMedAbstracts(query_Word, resultLimit);

                    if (!abstracts.isEmpty()) {
                        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Abstracts");
                        for (PubMedAbstract abs : abstracts) {
                            DefaultMutableTreeNode child = new DefaultMutableTreeNode("PMID: " + abs.getPMID());
                            root.add(child);
                        }

                        tree = new JTree(root);
                        tree.setShowsRootHandles(true);
                        tree.putClientProperty("JTree.lineStyle", "Horizontal");
                        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

                        JScrollPane sp = new JScrollPane(tree);
                        sp.setViewportView(tree);

                        htmlPane = new JEditorPane();
                        htmlPane.setContentType("text/html");
                        htmlPane.addHyperlinkListener(new HyperlinkListener() {

                            @Override
                            public void hyperlinkUpdate(HyperlinkEvent hle) {
                                if (HyperlinkEvent.EventType.ACTIVATED == hle.getEventType()) {
                                    System.out.println(hle.getURL());
                                    Desktop desktop = Desktop.getDesktop();
                                    try {
                                        desktop.browse(hle.getURL().toURI());
                                    } catch (IOException | URISyntaxException ex) {
                                        System.err.println(ex.getMessage());
                                    }
                                }
                            }
                        });

                        JScrollPane htmlView = new JScrollPane(htmlPane);

                        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
                        splitPane.setLeftComponent(sp);
                        splitPane.setRightComponent(htmlView);
                        splitPane.setDividerLocation(200);

                        tree.addTreeSelectionListener(new TreeSelectionListener() {
                            @Override
                            public void valueChanged(TreeSelectionEvent e) {
                                updateAbstracts();
                            }
                        });

                        resultPanel.setLayout(new BorderLayout());
                        resultPanel.add(BorderLayout.CENTER, splitPane);
                    }

                } catch (IOException | ParserConfigurationException | SAXException ex) {
                    Utility.UI.showInfoMessage(getRootPane(), "No internet connection detected! PubMedMiner requires an active internet connection.");
                    processQuery.setEnabled(true);
                }
            }

            return null;

        }

    }

    class UITagger extends SwingWorker<Void, Void> {

        private AbstractTagger.OPERATION operation;
        private List<PubMedAbstract> abstracts;

        public UITagger(List<PubMedAbstract> abstracts) {
            this.abstracts = abstracts;
        }

        @Override
        protected void done() {
            statusBar.setText("Done!");
            updateAbstracts();
            progressBar.setVisible(false);
            cancelTask.setVisible(false);
        }

        @Override
        protected Void doInBackground() throws Exception {
            statusBar.setText(null);
            if (!abstracts.isEmpty()) {

                statusBar.setText("working...");

                switch (operation) {
                    case COA:
                        List<PubMedAbstract> copy1_abstracts = new ArrayList<>(abstracts);
                        AbstractTagger absTagger1 = new AbstractTagger(copy1_abstracts);
                        progressBar.setString("Recognizing named entities...");
                        absTagger1.tagNamedEntities();
                        progressBar.setString("Finding co-occurrences...");
                        HashMap<HashMap<String, List<String>>, Integer> coMap = absTagger1.getCoAnalysisMap();
                        JSONWriter writer = new JSONWriter(coMap);
                        progressBar.setString("Creating nodes and links...");
                        writer.createNodesAndLinks();
                        writer.writeJSONTree();
                        writer.writeJSONMatrix();
                        jsonTree = writer.getJsonTree();
                        jsonMatrix = writer.getJsonMatrix();
                        break;
                    case NER:
                        List<PubMedAbstract> copy2_abstracts = new ArrayList<>(abstracts);
                        AbstractTagger absTagger2 = new AbstractTagger(copy2_abstracts);
                        progressBar.setString("Recognizing named entities...");
                        absTagger2.tagNamedEntities();
                        break;
                }

            } else {
                statusBar.setText("Error! No abstracts selected for analysis.");
            }
            return null;

        }

        public void setOperation(AbstractTagger.OPERATION operation) {
            this.operation = operation;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.installLookAndFeel("SeaGlass", "com.seaglasslookandfeel.SeaGlassLookAndFeel");
            UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.err.println("Seaglass LAF not available using Ocean.");
            try {
                UIManager.setLookAndFeel(new MetalLookAndFeel());
            } catch (UnsupportedLookAndFeelException e2) {
                System.err.println("Unable to use Ocean LAF using default.");
            }
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                MainUI ui = new MainUI();
                ui.setVisible(true);
                GraphicsConfiguration gc = ui.getGraphicsConfiguration();
                Rectangle bounds = gc.getBounds();
                Dimension size = ui.getPreferredSize();
                ui.setLocation((int) ((bounds.width / 2) - (size.getWidth() / 2)),
                        (int) ((bounds.height / 2) - (size.getHeight() / 2)));
                ui.addWindowListener(new WindowListener() {

                    @Override
                    public void windowOpened(WindowEvent e) {

                    }

                    @Override
                    public void windowClosing(WindowEvent e) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

                        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to close PubMedMiner?",
                                "PubMedMiner",
                                JOptionPane.YES_NO_OPTION);
                        // if choosen Yes, then the application will be closed
                        if (selectedOption == JOptionPane.YES_OPTION) {
                            System.exit(0);
                        }

                    }

                    @Override
                    public void windowClosed(WindowEvent e) {
                    }

                    @Override
                    public void windowIconified(WindowEvent e) {
                    }

                    @Override
                    public void windowDeiconified(WindowEvent e) {
                    }

                    @Override
                    public void windowActivated(WindowEvent e) {
                    }

                    @Override
                    public void windowDeactivated(WindowEvent e) {
                    }

                });
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JButton cancelTask;
    private javax.swing.JMenuItem coAnalysis;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JTextField maxNumResults;
    private javax.swing.JRadioButton multipleQuery;
    private javax.swing.JMenuItem nerAnalysis;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JButton processQuery;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel queryLabel;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JLabel queryTypeLabel;
    private javax.swing.JTextField queryWord;
    private javax.swing.JLabel resultCountLabel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JMenuItem saveAllAbstracts;
    private javax.swing.JMenu saveMenu;
    private javax.swing.JRadioButton singleQuery;
    private javax.swing.JLabel statusBar;
    private javax.swing.JMenuItem viewCoMatrix;
    private javax.swing.JMenuItem viewCoNetwork;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
